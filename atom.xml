<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>刘航</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.liuhang.net.cn/"/>
  <updated>2016-12-25T00:50:23.000Z</updated>
  <id>http://blog.liuhang.net.cn/</id>
  
  <author>
    <name>刘航</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring笔记1</title>
    <link href="http://blog.liuhang.net.cn/2016/12/23/Spring%E7%AC%94%E8%AE%B01/"/>
    <id>http://blog.liuhang.net.cn/2016/12/23/Spring笔记1/</id>
    <published>2016-12-23T07:37:52.000Z</published>
    <updated>2016-12-25T00:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-EE概述"><a href="#Java-EE概述" class="headerlink" title="Java EE概述"></a>Java EE概述</h2><ol>
<li>Java EE是什么<ul>
<li>学习Java各种框架之前,有必要对Java EE有基本的了解,方便理解各种框架兴起的原因(为什么要用这个框架,而不用JavaEE中相应的东西).</li>
<li>Java平台企业版（Java Platform Enterprise Edition），是Sun公司为企业级应用推出的标准平台.</li>
</ul>
</li>
<li>分层模型<ul>
<li><img src="../images/Java-EE分层模型.jpg" alt=""></li>
</ul>
</li>
<li>组件<ul>
<li>Java EE是一系列技术标准所组成的平台<ul>
<li>Applet - Java Applet</li>
<li>EJB - 企业级JavaBean（Enterprise Java Beans）</li>
<li>JAAS - Java Authentication and Authorization Service</li>
<li>JACC - J2EE Authorization Contract for Containers</li>
<li>JAF - Java Beans Activation Framework</li>
<li>JAX-RPC - Java API for XML-Based Remote Procedure Calls</li>
<li>JAX-WS - Java API for XML Web Services</li>
<li>JAXM - Java API for XML Messaging</li>
<li>JAXP - Java XML解析API（Java API for XML Processing）</li>
<li>JAXR - Java API for XML Registries</li>
<li>JCA - J2EE连接器架构（J2EE Connector Architecture）</li>
<li>JDBC - Java数据库联接（Java Database Connectivity）</li>
<li>JMS - Java消息服务（Java Message Service）</li>
<li>JMX - Java Management</li>
<li>JNDI - Java名称与目录接口（Java Naming and Directory Interface）</li>
<li>JSF - Java Server Faces</li>
<li>JSP - Java服务器页面（Java Server Pages）</li>
<li>JSTL - Java服务器页面标准标签库（Java Server Pages Standard Tag Library）</li>
<li>JTA - Java事务API（Java Transaction API）</li>
<li>JavaMail</li>
<li>Servlet - Java Servlet API</li>
<li>StAX - Streaming APIs for XML Parsers</li>
<li>WS - Web Services</li>
</ul>
</li>
</ul>
</li>
<li>参考<ul>
<li><a href="https://zh.wikipedia.org/zh-cn/Java_EE" target="_blank" rel="external">Java EE维基百科</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j2ee/" target="_blank" rel="external">Java EE简介</a></li>
</ul>
</li>
</ol>
<h2 id="spring框架概述"><a href="#spring框架概述" class="headerlink" title="spring框架概述"></a>spring框架概述</h2><ol>
<li>什么是spring<ul>
<li>Spring是一个开源框架，Spring是于2003 年兴起的一个轻量级的Java 开发框架，由Rod Johnson 在其著作Expert One-On-One J2EE Development and Design中阐述的部分理念和原型衍生而来。它是为了解决企业应用开发的复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许使用者选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。Spring使用基本的JavaBean来完成以前只可能由EJB完成的事情。然而，Spring的用途不仅限于服务器端的开发。从简单性、可测试性和松耦合的角度而言，任何Java应用都可以从Spring中受益。<strong>Spring的核心是控制反转（IoC）和面向切面（AOP）</strong>。简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式) 轻量级开源框架。</li>
<li>分层： 一站式，每一个层都提供的解决方案<ul>
<li>web层：struts，spring-MVC<ul>
<li>service层：spring</li>
<li>dao层：hibernate，mybatis ， jdbcTemplate  –&gt; spring-data</li>
</ul>
</li>
<li><img src="../images/框架体系结构.png" alt="框架体系结构"></li>
</ul>
</li>
</ul>
</li>
<li><p>spring体系结构</p>
<ul>
<li><img src="../images/spring体系图.png" alt="spring体系结构"></li>
<li>容器是spring的核心. Spring容器使用DI(Dependency Inject)管理构成应用的组件,它会创建相互协作的组件之间的关联. Spring自带多个容器实现,可以归为两种类型: bean工厂(由<code>org.springframework.beans.factory.BeanFactory</code>接口定义);应用上下文(由<code>org.springframework.context.ApplicationContext</code>接口定义)基于BeanFactory构建</li>
</ul>
</li>
<li><p>spring优点</p>
</li>
</ol>
<h2 id="Spring-IOC入门"><a href="#Spring-IOC入门" class="headerlink" title="Spring IOC入门"></a>Spring IOC入门</h2><h2 id="Demo详解"><a href="#Demo详解" class="headerlink" title="Demo详解"></a>Demo详解</h2><ol>
<li>单元测试<ul>
<li>@RunWith注解</li>
<li>@Rule注解</li>
<li>Assert用法</li>
<li><a href="http://stefanbirkner.github.io/system-rules/" target="_blank" rel="external">System Rules用法</a></li>
</ul>
</li>
<li>xmlconfig (基于xml配置)</li>
<li>autoconfig &amp;&amp; javaconfig(基于注解配置)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Spring学习笔记,依赖注入DI, (控制反转IOC)
    
    </summary>
    
      <category term="Spring" scheme="http://blog.liuhang.net.cn/categories/Spring/"/>
    
    
      <category term="Spring" scheme="http://blog.liuhang.net.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringMvc笔记1</title>
    <link href="http://blog.liuhang.net.cn/2016/12/22/springmvc%E7%AC%94%E8%AE%B01/"/>
    <id>http://blog.liuhang.net.cn/2016/12/22/springmvc笔记1/</id>
    <published>2016-12-22T14:14:24.000Z</published>
    <updated>2016-12-24T15:55:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Mvc框架原理"><a href="#Spring-Mvc框架原理" class="headerlink" title="Spring Mvc框架原理"></a>Spring Mvc框架原理</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://sishuok.com/forum/blogPost/list/5188.html" target="_blank" rel="external">DispatcherServlet详解</a></li>
<li><a href="http://www.cnblogs.com/brolanda/p/4265597.html" target="_blank" rel="external">应用上下文详解</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Spring Mvc框架原理
    
    </summary>
    
      <category term="SpringMvc" scheme="http://blog.liuhang.net.cn/categories/SpringMvc/"/>
    
    
      <category term="SpringMvc" scheme="http://blog.liuhang.net.cn/tags/SpringMvc/"/>
    
  </entry>
  
  <entry>
    <title>Java常见对象2</title>
    <link href="http://blog.liuhang.net.cn/2016/12/21/Java%E5%B8%B8%E8%A7%81%E5%AF%B9%E8%B1%A12/"/>
    <id>http://blog.liuhang.net.cn/2016/12/21/Java常见对象2/</id>
    <published>2016-12-21T11:57:19.000Z</published>
    <updated>2016-12-21T14:35:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><ul>
<li>Object类是Java中所有类的始祖,在Java中每个类都是由它扩展而来的.</li>
<li>Object类的hashCode方法</li>
<li>Object类的getClass方法</li>
<li>Object类的equals方法</li>
<li>Object类的toString方法</li>
<li>Object类的clone方法<ul>
<li>copy一个变量时,原始变量和copy变量引用同一个对象<br><img src="/images/Object类.png" alt="Object类"></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      Object类
    
    </summary>
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="day11" scheme="http://blog.liuhang.net.cn/tags/day11/"/>
    
  </entry>
  
  <entry>
    <title>Java面向对象4</title>
    <link href="http://blog.liuhang.net.cn/2016/12/21/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A14/"/>
    <id>http://blog.liuhang.net.cn/2016/12/21/Java面向对象4/</id>
    <published>2016-12-21T02:28:10.000Z</published>
    <updated>2016-12-21T03:30:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类及其组成所使用的常见修饰符"><a href="#类及其组成所使用的常见修饰符" class="headerlink" title="类及其组成所使用的常见修饰符"></a>类及其组成所使用的常见修饰符</h2><ul>
<li><p>修饰符</p>
<ul>
<li>权限修饰符: private,默认,protected, public</li>
<li>状态修饰符: static, final</li>
<li>抽象修饰符: abstract</li>
</ul>
</li>
<li><p>四种权限修饰符的权限</p>
</li>
</ul>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><ul>
<li>package, import, class 有没有顺序关系<ul>
<li>答: 有, package位于第一行可执行的语句,import在中间,class在最后.</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      package关键字,包,import,四种权限修饰符(private, default, protected, public),内部类
    
    </summary>
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="day10" scheme="http://blog.liuhang.net.cn/tags/day10/"/>
    
  </entry>
  
  <entry>
    <title>hibernate笔记1</title>
    <link href="http://blog.liuhang.net.cn/2016/12/20/hibernate%E7%AC%94%E8%AE%B01/"/>
    <id>http://blog.liuhang.net.cn/2016/12/20/hibernate笔记1/</id>
    <published>2016-12-20T13:22:27.000Z</published>
    <updated>2016-12-20T14:29:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="框架体系结构"><a href="#框架体系结构" class="headerlink" title="框架体系结构"></a>框架体系结构</h2><p><img src="/images/框架体系结构.png" alt="框架体系结构"></p>
<h2 id="hibernate入门"><a href="#hibernate入门" class="headerlink" title="hibernate入门"></a>hibernate入门</h2><ul>
<li>ORM框架<ul>
<li>Object Relational Mapping, 对象关系映射</li>
</ul>
</li>
<li>主流的ORM框架<ul>
<li>JPA: Java Persistence API. JDK5.0通过注解或者xml描述对象-关系表的映射关系的一套接口规范</li>
<li>Hibernate</li>
<li>mybatis</li>
</ul>
</li>
<li>hibernate<ul>
<li>hibernate是轻量级JavaEE应用的持久层解决方案,是一个关系型数据库ORM框架</li>
<li>hibernate结构<br><img src="/images/arch_hibernate.png" alt=""><ul>
<li>JNDI: Java 命名与目录接口（Java Naming and Directory Interface）;<a href="http://blog.csdn.net/afeilxc/article/details/3025854" target="_blank" rel="external">参考</a></li>
<li>JTA: Java Transaction API（Java事务API） (JTA)Java Transaction API(Application Programming Interface); <a href="http://www.hollischuang.com/archives/1658" target="_blank" rel="external">参考</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="http://howtodoinjava.com/hibernate/hibernate-3-introduction-and-writing-hello-world-application/" target="_blank" rel="external">hello world demo </a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      Hibernate笔记1, hibernate入门和基础
    
    </summary>
    
    
      <category term="Hibernate" scheme="http://blog.liuhang.net.cn/tags/Hibernate/"/>
    
  </entry>
  
  <entry>
    <title>MVC模式</title>
    <link href="http://blog.liuhang.net.cn/2016/12/18/MVC%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.liuhang.net.cn/2016/12/18/MVC模式/</id>
    <published>2016-12-18T07:53:13.000Z</published>
    <updated>2016-12-18T08:00:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web-MVC架构"><a href="#Web-MVC架构" class="headerlink" title="Web MVC架构"></a>Web MVC架构</h2><p><img src="/images/web-mvc架构.png" alt="web-mvc架构"></p>
]]></content>
    
    <summary type="html">
    
      MVC框架
    
    </summary>
    
      <category term="JavaWeb" scheme="http://blog.liuhang.net.cn/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://blog.liuhang.net.cn/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://blog.liuhang.net.cn/2016/12/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://blog.liuhang.net.cn/2016/12/18/正则表达式/</id>
    <published>2016-12-17T16:16:59.000Z</published>
    <updated>2016-12-21T14:36:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li>定义:是指一个用来描述或者匹配一系列符合某个语法规则的字符串的单个字符串</li>
</ul>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul>
<li>常用的元字符<ul>
<li>.    匹配除换行符以外的任意字符</li>
<li>\w    匹配字母或数字或下划线或汉字</li>
<li>\s    匹配任意的空白符</li>
<li>\d    匹配数字</li>
<li>\b    匹配单词的开始或结束</li>
<li>^    匹配字符串的开始</li>
<li>$    匹配字符串的结束</li>
</ul>
</li>
<li><p>重复</p>
<ul>
<li><ul>
<li>重复零次或更多次</li>
</ul>
</li>
<li>重复一次或更多次</li>
<li>?    重复零次或一次</li>
<li>{n}    重复n次</li>
<li>{n,}    重复n次或更多次</li>
<li>{n,m}    重复n到m次</li>
</ul>
</li>
<li><p>反义<br>+</p>
</li>
</ul>
<h2 id="glob-模式"><a href="#glob-模式" class="headerlink" title="glob 模式"></a>glob 模式</h2><ul>
<li>shell所使用的简化的正则表达式</li>
<li>星号（<code>*</code>）匹配零个或多个任意字符；[abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；问号（?）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 使用两个星号（<code>*</code>) 表示匹配任意中间目录，比如a/<code>**</code>/z 可以匹配 a/z, a/b/z 或 a/b/c/z等  </li>
</ul>
<h2 id="Java正则表达式使用"><a href="#Java正则表达式使用" class="headerlink" title="Java正则表达式使用"></a>Java正则表达式使用</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">强烈推荐教程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      正则表达式语法,Java正则表达式使用
    
    </summary>
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="day14" scheme="http://blog.liuhang.net.cn/tags/day14/"/>
    
  </entry>
  
  <entry>
    <title>事物&amp;数据库连接池&amp;DBUtils框架</title>
    <link href="http://blog.liuhang.net.cn/2016/12/16/%E4%BA%8B%E7%89%A9-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0-DBUtils%E6%A1%86%E6%9E%B6/"/>
    <id>http://blog.liuhang.net.cn/2016/12/16/事物-数据库连接池-DBUtils框架/</id>
    <published>2016-12-16T02:54:00.000Z</published>
    <updated>2016-12-16T03:05:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h2><ul>
<li><a href="http://www.cnblogs.com/xdp-gacl/p/3984001.html" target="_blank" rel="external">参考</a>  </li>
</ul>
<h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><ul>
<li><a href="http://www.cnblogs.com/xdp-gacl/p/4002804.html" target="_blank" rel="external">参考</a></li>
<li>DBCP 数据库连接池</li>
<li>C3P0 数据库连接池</li>
</ul>
<h2 id="DBUtils框架"><a href="#DBUtils框架" class="headerlink" title="DBUtils框架"></a>DBUtils框架</h2><ul>
<li><a href="http://www.cnblogs.com/xdp-gacl/p/4007225.html" target="_blank" rel="external">参考</a></li>
<li>commons-dbutils简介</li>
<li>QueryRunner</li>
<li>ResultSetHandler</li>
</ul>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><div class="github-widget" data-repo="husthang/bookStore"></div>    
]]></content>
    
    <summary type="html">
    
      数据库事物,数据库连接池,Apache之DBUtils框架
    
    </summary>
    
      <category term="JavaWeb" scheme="http://blog.liuhang.net.cn/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://blog.liuhang.net.cn/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>过滤器与监听器</title>
    <link href="http://blog.liuhang.net.cn/2016/12/15/%E8%BF%87%E6%BB%A4%E5%99%A8%E4%B8%8E%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>http://blog.liuhang.net.cn/2016/12/15/过滤器与监听器/</id>
    <published>2016-12-15T13:52:27.000Z</published>
    <updated>2016-12-16T02:50:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤器filter"><a href="#过滤器filter" class="headerlink" title="过滤器filter"></a>过滤器filter</h2><ul>
<li><a href="http://www.cnblogs.com/xdp-gacl/p/3948353.html" target="_blank" rel="external">参考</a></li>
</ul>
<h2 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h2><ul>
<li><a href="http://www.cnblogs.com/xdp-gacl/p/3961929.html" target="_blank" rel="external">参考</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      监听器与过滤器笔记
    
    </summary>
    
      <category term="JavaWeb" scheme="http://blog.liuhang.net.cn/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://blog.liuhang.net.cn/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-Decorator模式</title>
    <link href="http://blog.liuhang.net.cn/2016/12/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Decorator%E6%A8%A1%E5%BC%8F/"/>
    <id>http://blog.liuhang.net.cn/2016/12/15/设计模式-Decorator模式/</id>
    <published>2016-12-15T08:36:20.000Z</published>
    <updated>2016-12-15T12:01:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>动态地给一个对象增加一些额外的职责，就增加对象功能来说，装饰模式比生成子类实现更为灵活。装饰模式是一种对象结构型模式。装饰模式是一种用于替代继承的技术,使用对象之间的关联关系取代类之间的继承关系。在装饰模式中引入了装饰类，在装饰类中既可以调用待装饰的原有类的方法，还可以增加新的方法，以扩充原有类的功能。</li>
<li>适用场景:装饰原有对象、在不改变原有对象的情况下扩展增强新功能/新特征.。当不能采用继承的方式对系统进行扩展或者采用继承不利于系统扩展和维护时可以使用装饰模式。</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol>
<li>看需要被增强的对象继承了哪些类或者接口,编写一个类去继承或者实现这些接口或者父类</li>
<li>在这个编写的类中,增加一个变量,变量类型为要增强的对象的类型;然后定义构造函数,构造这个变量;</li>
<li>这个类去实现接口或者父类时,调用2中定义的变量的相应方法(从而在装饰类中保留原有类的方法)</li>
<li>重写需要增强的方法(从而增强要装饰的方法,增强这个方法的功能)</li>
</ol>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><ul>
<li>装饰模式中的四种角色<ul>
<li>①Component（抽象构件）：它是具体构件和抽象装饰类的共同父类，声明了在具体构件中实现的业务方法。</li>
<li>②ConcreteComponent（具体构件）：它是抽象构件类的子类，用于定义具体的构件对象（被装饰者），实现了在抽象构件中声明的方法，装饰器可以给它增加额外的职责（方法）。</li>
<li>③Decorator（抽象装饰类）：它也是抽象构件类的子类，用于给具体构件增加职责，但是具体职责在其子类中实现。它维护一个指向抽象构件对象的引用，通过该引用可以调用装饰之前构件对象的方法，并通过其子类扩展该方法，以达到装饰的目的。</li>
<li>④ConcreteDecorator（具体装饰类）：它是抽象装饰类的子类，负责向构件添加新的职责。每一个具体装饰类都定义了一些新的行为，它可以调用在抽象装饰类中定义的方法，并可以增加新的方法用以扩充对象的行为。</li>
</ul>
</li>
<li>抽象构件 Component.Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> decorator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuhang on 2016/12/15.</div><div class="line"> * 角色：抽象构件 Component.Java</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line">```  </div><div class="line">- 具体构件类 ConcreteComponent.java</div><div class="line"></div><div class="line">```java</div><div class="line"><span class="keyword">package</span> decorator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuhang on 2016/12/15.</div><div class="line"> * 具体构建类,继承抽象类Component</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponent</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"我是具体的构件类,被装饰(增强)的"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>抽象装饰类 Decorator.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> decorator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuhang on 2016/12/15.</div><div class="line"> * 作用:引入抽象构件类， 给具体构件类增加职责，但是具体职责在其子类中实现</div><div class="line"></div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Component component;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.component = component;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//调用原有业务方法</span></div><div class="line">        component.operation();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>具体装饰类A</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> decorator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuhang on 2016/12/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecoratorA</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(component);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.operation();</div><div class="line">        addedBehavior();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addedBehavior</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"我是具体的装饰类A，我可以增强原有对象方法"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>具体装饰类B</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> decorator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuhang on 2016/12/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> <span class="keyword">extends</span> <span class="title">Decorator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteDecoratorB</span><span class="params">(Component component)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(component);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.operation();</div><div class="line">        addedAnotherBehavior();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addedAnotherBehavior</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"我是具体的装饰类B，我也可以增强原有对象方法"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> decorator;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by liuhang on 2016/12/15.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Component component, decoratorA;</div><div class="line"></div><div class="line">        component = <span class="keyword">new</span> ConcreteComponent();</div><div class="line">        decoratorA = <span class="keyword">new</span> ConcreteDecoratorA(component);<span class="comment">//对原有具体构件component进行装饰</span></div><div class="line"></div><div class="line">        component.operation();</div><div class="line">        System.out.println(<span class="string">"\n装饰一次后:"</span>);</div><div class="line">        decoratorA.operation();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"\n二次装饰"</span>);</div><div class="line">        Component decoratorB;</div><div class="line">        decoratorB = <span class="keyword">new</span> ConcreteDecoratorB(decoratorA);<span class="comment">// 如果需要对原有构件对象装饰后的decoratorA对象上进行再次装饰</span></div><div class="line">        decoratorB.operation();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>测试结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">我是具体的构件类,被装饰(增强)的</div><div class="line"></div><div class="line">装饰一次后:</div><div class="line">我是具体的构件类,被装饰(增强)的</div><div class="line">我是具体的装饰类A，我可以增强原有对象方法</div><div class="line"></div><div class="line">二次装饰</div><div class="line">我是具体的构件类,被装饰(增强)的</div><div class="line">我是具体的装饰类A，我可以增强原有对象方法</div><div class="line">我是具体的装饰类B，我可以增强原有对象方法</div><div class="line"></div><div class="line">Process finished with exit code 0</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://blog.csdn.net/janice0529/article/details/44160091" target="_blank" rel="external">Decorator参考</a></li>
<li><a href="http://www.kancloud.cn/digest/xing-designpattern/143730" target="_blank" rel="external">设计模式参考</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      装饰模式
    
    </summary>
    
      <category term="设计模式" scheme="http://blog.liuhang.net.cn/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://blog.liuhang.net.cn/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="http://blog.liuhang.net.cn/2016/12/14/Java%E5%8F%8D%E5%B0%84/"/>
    <id>http://blog.liuhang.net.cn/2016/12/14/Java反射/</id>
    <published>2016-12-14T02:34:51.000Z</published>
    <updated>2016-12-15T01:20:41.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="day27" scheme="http://blog.liuhang.net.cn/tags/day27/"/>
    
  </entry>
  
  <entry>
    <title>CMake笔记</title>
    <link href="http://blog.liuhang.net.cn/2016/12/13/CMake%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.liuhang.net.cn/2016/12/13/CMake笔记/</id>
    <published>2016-12-13T13:45:42.000Z</published>
    <updated>2016-12-13T13:48:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://hahack.com/codes/cmake/" target="_blank" rel="external">参考此处</a></p>
]]></content>
    
    <summary type="html">
    
      CMake学习笔记,入门知识
    
    </summary>
    
      <category term="C/C++" scheme="http://blog.liuhang.net.cn/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://blog.liuhang.net.cn/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Java流</title>
    <link href="http://blog.liuhang.net.cn/2016/12/10/Java%E6%B5%81/"/>
    <id>http://blog.liuhang.net.cn/2016/12/10/Java流/</id>
    <published>2016-12-10T04:38:57.000Z</published>
    <updated>2016-12-14T02:35:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java流"><a href="#Java流" class="headerlink" title="Java流"></a>Java流</h2><p><a href="http://www.cnblogs.com/xdp-gacl/p/3634409.html" target="_blank" rel="external">Java流讲解</a></p>
]]></content>
    
    <summary type="html">
    
      Java基础,流
    
    </summary>
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="day21" scheme="http://blog.liuhang.net.cn/tags/day21/"/>
    
  </entry>
  
  <entry>
    <title>Java其他总结</title>
    <link href="http://blog.liuhang.net.cn/2016/12/09/Java%E5%85%B6%E4%BB%96%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.liuhang.net.cn/2016/12/09/Java其他总结/</id>
    <published>2016-12-09T03:25:52.000Z</published>
    <updated>2016-12-13T13:43:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java读取properties文件"><a href="#java读取properties文件" class="headerlink" title="java读取properties文件"></a>java读取properties文件</h2><ul>
<li>推荐用ResourceBundle读取<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * java.util.ResourceBundle;</div><div class="line"> * ResourceBundle读取properties文件,类路径下寻找文件,不带后缀名</div><div class="line"> */</div><div class="line">ResourceBundle resourceBundle = ResourceBundle.getBundle(<span class="string">"dbInfo"</span>);</div><div class="line">driverClass = resourceBundle.getString(<span class="string">"driverClass"</span>);</div><div class="line">url = resourceBundle.getString(<span class="string">"url"</span>);</div><div class="line">user = resourceBundle.getString(<span class="string">"user"</span>);</div><div class="line">password = resourceBundle.getString(<span class="string">"password"</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      总结Java各种技巧
    
    </summary>
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Java泛型</title>
    <link href="http://blog.liuhang.net.cn/2016/12/09/Java%E6%B3%9B%E5%9E%8B/"/>
    <id>http://blog.liuhang.net.cn/2016/12/09/Java泛型/</id>
    <published>2016-12-09T03:00:37.000Z</published>
    <updated>2016-12-09T03:02:02.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="day16" scheme="http://blog.liuhang.net.cn/tags/day16/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架</title>
    <link href="http://blog.liuhang.net.cn/2016/12/09/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6/"/>
    <id>http://blog.liuhang.net.cn/2016/12/09/Java集合框架/</id>
    <published>2016-12-09T02:20:20.000Z</published>
    <updated>2016-12-09T03:00:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="集合体系"><a href="#集合体系" class="headerlink" title="集合体系"></a>集合体系</h2><ul>
<li>集合体系图<br><img src="/images/集合体系图.png" alt="集合体系图"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      Java集合框架
    
    </summary>
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="day15" scheme="http://blog.liuhang.net.cn/tags/day15/"/>
    
  </entry>
  
  <entry>
    <title>各种bug修复记录</title>
    <link href="http://blog.liuhang.net.cn/2016/12/05/%E5%90%84%E7%A7%8Dbug%E8%AE%B0%E5%BD%95/"/>
    <id>http://blog.liuhang.net.cn/2016/12/05/各种bug记录/</id>
    <published>2016-12-05T12:21:00.000Z</published>
    <updated>2016-12-08T14:23:10.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>Mac端口占用</p>
<ul>
<li><code>错误: 代理抛出异常错误: java.rmi.server.ExportException: Port already in use: 1099; nested exception is:
java.net.BindException: Address already in use</code></li>
<li><a href="http://www.jianshu.com/p/58bfb5917d5f" target="_blank" rel="external">详见</a></li>
</ul>
</li>
<li><p>mysql事务回滚失败</p>
<ul>
<li>问题:<code>Some non-transactional changed tables couldn&#39;t be rolled back</code></li>
<li>解决: 数据库表的引擎需要设置为InnoDB才能支持事物<ul>
<li><code>alter table myTable ENGINE=InnoDB;</code></li>
<li><a href="http://stackoverflow.com/questions/23940814/django-w-mysql-non-transactional-changed-tables-couldnt-be-rolled-back" target="_blank" rel="external">参考</a></li>
<li><a href="http://www.ha97.com/4197.html" target="_blank" rel="external">资料:mysql存储引擎MyISAM与InnoDB的主要区别对比</a></li>
</ul>
</li>
</ul>
</li>
<li><p>修改IntelliJ IDEA中Maven项目的默认JDK版本</p>
<ul>
<li>问题:在IntelliJ IDEA 15中使用Maven时，IDEA将默认的编译版本、源码版本设置为jdk5。编译项目的时候出现警告：”Warning:java: 源值1.5已过时, 将在未来所有发行版中删除”，并且无法编译jdk1.5以上的代码。</li>
<li><p>解决</p>
<ul>
<li><p>maven 配置jdk版本如jdk1.8</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">      &lt;build&gt;</div><div class="line">    &lt;finalName&gt;bookStore&lt;/finalName&gt;</div><div class="line">    &lt;plugins&gt;</div><div class="line">        &lt;plugin&gt;</div><div class="line">            &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</div><div class="line">            &lt;configuration&gt;</div><div class="line">                &lt;source&gt;1.8&lt;/source&gt;</div><div class="line">                &lt;target&gt;1.8&lt;/target&gt;</div><div class="line">            &lt;/configuration&gt;</div><div class="line">        &lt;/plugin&gt;</div><div class="line">    &lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div></pre></td></tr></table></figure>
<ul>
<li><a href="http://blog.csdn.net/zhaoyongnj2012/article/details/23970451" target="_blank" rel="external">参考</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<div class="github-widget" data-repo="husthang/bookStore"></div>    
]]></content>
    
    <summary type="html">
    
      遇到的各种bug的解决记录
    
    </summary>
    
      <category term="项目实战" scheme="http://blog.liuhang.net.cn/categories/%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    
    
      <category term="bug" scheme="http://blog.liuhang.net.cn/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>hexo笔记</title>
    <link href="http://blog.liuhang.net.cn/2016/12/05/hexo%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.liuhang.net.cn/2016/12/05/hexo笔记/</id>
    <published>2016-12-05T02:47:01.000Z</published>
    <updated>2016-12-05T02:48:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="http://jelon.top/2016/05/15/fill-hexo/" target="_blank" rel="external">基本教程</a></p>
]]></content>
    
    <summary type="html">
    
      hexo笔记
    
    </summary>
    
    
      <category term="hexo" scheme="http://blog.liuhang.net.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Java常见对象1</title>
    <link href="http://blog.liuhang.net.cn/2016/12/05/Java%E5%B8%B8%E8%A7%81%E5%AF%B9%E8%B1%A11/"/>
    <id>http://blog.liuhang.net.cn/2016/12/05/Java常见对象1/</id>
    <published>2016-12-05T02:27:02.000Z</published>
    <updated>2016-12-21T11:57:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h2><ol>
<li>作用: 可以在对象中定义更多的功能方法,操作该书籍</li>
<li>常用操作: 用于基本数据类型和字符串之间的转换</li>
<li>基本类型和包装类的对应<ul>
<li><code>byte Byte</code></li>
<li><code>short Short</code></li>
<li><code>int Integer</code></li>
<li><code>long Long</code></li>
<li><code>char Character</code></li>
<li><code>float Float</code></li>
<li><code>double Double</code></li>
<li><code>boolean Boolean</code></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      StringBuffer,String,包装类
    
    </summary>
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/categories/Java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java基础" scheme="http://blog.liuhang.net.cn/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
      <category term="day13" scheme="http://blog.liuhang.net.cn/tags/day13/"/>
    
  </entry>
  
  <entry>
    <title>Cookie与Session</title>
    <link href="http://blog.liuhang.net.cn/2016/12/04/Cookie%E4%B8%8ESession/"/>
    <id>http://blog.liuhang.net.cn/2016/12/04/Cookie与Session/</id>
    <published>2016-12-04T13:39:58.000Z</published>
    <updated>2016-12-15T13:50:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>1.</p>
<ol>
<li>保存会话的两种技术<ul>
<li>Cookie: 客户端技术. 程序把每个用户的数据存在用户各自的浏览器中.</li>
<li>Session: 服务端技术.</li>
</ul>
</li>
</ol>
<h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><ul>
<li><a href="http://www.cnblogs.com/xdp-gacl/p/3803033.html" target="_blank" rel="external">参考</a>  </li>
</ul>
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><ul>
<li><a href="http://www.cnblogs.com/xdp-gacl/p/3855702.html" target="_blank" rel="external">参考</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      Cookie与Session笔记
    
    </summary>
    
      <category term="JavaWeb" scheme="http://blog.liuhang.net.cn/categories/JavaWeb/"/>
    
    
      <category term="JavaWeb" scheme="http://blog.liuhang.net.cn/tags/JavaWeb/"/>
    
  </entry>
  
</feed>
